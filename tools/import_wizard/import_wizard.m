function varargout = import_wizard(varargin)
% import data from known formats
%
%
%
%% See also
% loadPoleFigure

%%
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       'wizard', ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @import_wizard_OpeningFcn, ...
                   'gui_OutputFcn',  @import_wizard_OutputFcn, ...
                   'gui_LayoutFcn',  @import_wizard_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
%%

%% --- Executes just before import_wizard is made visible.
function import_wizard_OpeningFcn(hObject, eventdata, handles, varargin) %#ok<INUSL>
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to import_wizard (see VARARGIN)

% Choose default command line output for import_wizard
handles.output = hObject;
% Update handles struct
guidata(hObject, handles);
global pf
global page
global FileName
global PathName
global workpath

pf = [];
workpath = cd;
FileName = [];
PathName = [];
page =  1;
set_tab(hObject,handles);
        
set(handles.Bdatalist, 'String', FileName);
set(handles.Bdatalist,'Value',1);

set(handles.Ccrystalpopup, 'String', symmetries);
set(handles.Cspecimepopup, 'String', symmetries);

set([handles.i, handles.Di], 'Enable', 'off'); 

%% ------------ switch between pages --------------------------------------
%--------------------------------------------------------------------------

function leavepage(page,handles)
global pf;

switch page  
  case 1
    if isempty(pf), error('Add some data files to be imported!');end
  case 2
    crystal2pf(handles);
  case 3
    try
      set_hkli(handles);
    catch
      error('There must be the same number of hkli and structure coefficients.');
    end
  case 4

end

function gotopage(page,handles)
global pf

switch page
  case 2
    pf2crystal(handles);
  case 3
    setup_polefigurelist(handles);
    get_hkli(handles);
  case 4
    str = char(pf);
    set(handles.preview,'String',str);
end

% --- Executes on button press in next.
function next_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
global page

try
  leavepage(page,handles);
  if page < 4, page = page + 1;end
  gotopage(page,handles);
  set_tab(hObject,handles);
catch
  errordlg(errortext);
end

% --- Executes on button press in prev.
function prev_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
global page

try
  leavepage(page,handles);
  if page > 1, page = page - 1;end
  gotopage(page,handles);
  set_tab(hObject,handles);
catch
  errordlg(errortext);
end

%% ------------- First Page -----------------------------------------------
% -------------------------------------------------------------------------

% --- Executes on button press in Badd.
function Badd_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
global pf
global FileName
global PathName
global workpath

[fn,PathName] = uigetfile( mtexfilefilter,...
  'Select Data files',...
  'MultiSelect', 'on',...
  workpath );
                                     
if ~iscellstr(fn), fn = {fn};end;
                                     
if PathName ~= 0
  
  % generate pole figure object
  try
    npf = loadPoleFigure(strcat(PathName,fn(:)));
        
    % new directory?
    if ~strcmp(workpath,PathName) 
      
      % replace pole figures
      pf = npf;
      workpath = PathName;
      FileName = fn;                
    else
      
      % add pole figures
      pf = [pf,npf];
      FileName = [ FileName , fn ];
    end
    
  catch
    errordlg(errortext);
  end
  
  % set list of filenames
  set(handles.Bdatalist, 'String', FileName);
  set(handles.Bdatalist,'Value',1);
  
end

% --- Executes on button press in Bremove.
function Bremove_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
global FileName
global pf;

if ~isempty(pf)
  
  index_selected = get(handles.Bdatalist,'Value');
  
  % remove pole figure
  pf(index_selected) = [];
    
  if iscellstr(FileName)
    FileName(:,index_selected(:))=[];
  else
    FileName = [];
  end;
  
  selected = min([index_selected,length(FileName)]);
  
  set(handles.Bdatalist,'Value',selected);
  set(handles.Bdatalist,'String', FileName);
  
end


%% ----------------- Second page ------------------------------------------
%--------------------------------------------------------------------------

% load symmetries from global pf object
function pf2crystal(handles)
global pf;

% set crystal symmetry
cs = getCS(pf);
csname = strmatch(Laue(cs),symmetries);
set(handles.Ccrystalpopup,'value',csname(1));

% set axes
a = getaxes(cs);
c = norm(a);
a = a./c;

set(handles.Ca,'String',c(1));
set(handles.Cb,'String',c(2));
set(handles.Cc,'String',c(3));

% set angle
alpha = round(acos(dot(a(1),a(3)))/ degree);
beta = round(acos(dot(a(2),a(3)))/ degree);
gamma = round(acos(dot(a(1),a(2)))/ degree);

set(handles.Calpha,'String',alpha); 
set(handles.Cbeta,'String',beta); 
set(handles.Cgamma,'String',gamma);

% set specimen symmetry
ssname = strmatch(Laue(getSS(pf)),symmetries);
set(handles.Cspecimepopup,'value',ssname(1));

% deactivate unused fields
axes_length = [ handles.Ca, handles.Cb, handles.Cc];
axes_angle = [ handles.Calpha, handles.Cbeta, handles.Cgamma ];

set([axes_length axes_angle], 'Enable', 'on');

if ~strcmp(Laue(getCS(pf)),{'-1','2/m'}), set(axes_angle, 'Enable', 'off');end
  
if any(strcmp(Laue(getCS(pf)),{'m-3m','m-3'})), 
  set(axes_length, 'Enable', 'off');
end


% store symmetries to global pf object
function crystal2pf(handles)
global pf

cs = get(handles.Ccrystalpopup,'Value');
cs = symmetries(cs);
cs = strtrim(cs{1}(1:6));
a = str2num(get(handles.Ca,'String')); %#ok<ST2NM>
b = str2num(get(handles.Cb,'String')); %#ok<ST2NM>
c = str2num(get(handles.Cc,'String')); %#ok<ST2NM>
alpha = str2num(get(handles.Calpha,'String')); %#ok<ST2NM>
beta = str2num(get(handles.Cbeta,'String')); %#ok<ST2NM>
gamma = str2num(get(handles.Cgamma,'String')); %#ok<ST2NM>

cs = symmetry(cs,[a b c],[alpha,beta,gamma]);
pf = set(pf,'CS',cs);

ss = symmetries(get(handles.Cspecimepopup,'Value'));
ss = strtrim(ss{1}(1:6));
ss = symmetry(ss);
pf = set(pf,'SS',ss);

% --- Executes on selection change in Ccrystalpopup.
function Ccrystalpopup_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>

crystal2pf(handles);
pf2crystal(handles);


%% -------------------------- Third Page ----------------------------------
%--------------------------------------------------------------------------

%%
function setup_polefigurelist(handles)

global pf

% fill list of pole figures
for i=1:length(pf) 
 m{i} = char(getMiller(pf(i)));  
 p{i} = ['  ',getcomment(pf(i))];
 %pflist{i} = sprintf('%s\t%s',char(getMiller(pf(i))),getcomment(pf(i)));
end
pflist = cellstr([strvcat(m),strvcat(p)]); %#ok<VCAT>

set(handles.Dpolefigurelist, 'String', pflist);
n = get(handles.Dpolefigurelist, 'Value');
if n <= 0 || n > length(pf)
  set(handles.Dpolefigurelist, 'Value', 1);
end

% store hkl to global pf object
function set_hkli(handles)
global pf

ip =  get(handles.Dpolefigurelist,'Value');

h = str2num(get(handles.Dh, 'String')); %#ok<ST2NM>
k = str2num( get(handles.Dk, 'String')); %#ok<ST2NM>
l = str2num(get(handles.Dl, 'String')); %#ok<ST2NM>
c = str2num(get(handles.Dscale, 'String')); %#ok<ST2NM>
assert(length(h) == length(c));

pf(ip) = set(pf(ip),'h',Miller(h,k,l,getCS(pf)));
pf(ip) = set(pf(ip),'c',c);
get_hkli(handles);


% retrieve hkl from global pf object
function get_hkli(handles)
global pf

ip =  get(handles.Dpolefigurelist,'Value');

m = getMiller(pf(ip));

set(handles.Dh, 'String', int2str(get(m,'h')));
set(handles.Dk, 'String', int2str(get(m,'k')));
set(handles.Dl, 'String', int2str(get(m,'l')));

if any(strcmp(Laue(getCS(pf)),{'-3m','-3','6/m','6/mmm'}))
  set(handles.Di, 'String', int2str(-get(m,'h') - get(m,'k')));
else
  set(handles.Di, 'String','');
end

set(handles.Dscale, 'String', int2str(getc(pf(ip))));


% --- Executes on selection change in Dpolefigurelist.
function Dpolefigurelist_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
get_hkli(handles);
setup_polefigurelist(handles);

function Dh_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
try set_hkli(handles);end %#ok<TRYNC>

function Dk_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
try set_hkli(handles);end %#ok<TRYNC>

function Di_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
try set_hkli(handles);end %#ok<TRYNC>

function Dl_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
try set_hkli(handles);end %#ok<TRYNC>

function Dscale_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
try set_hkli(handles);end %#ok<TRYNC>


%% --------------------------- Fourth Page --------------------------------
% -------------------------------------------------------------------------

% plot pole figures
function plot_Callback(hObject, eventdata, handles) %#ok<INUSD,DEFNU>
global pf

scrsz = get(0,'ScreenSize');
figure('Position',[scrsz(3)/8 scrsz(4)/8 6*scrsz(3)/8 6*scrsz(4)/8]);
plot(pf);


% 
function str = generateCodeString(strCells)
str = [];
for n = 1:length(strCells)
    str = [str, strCells{n}, sprintf('\n')];
end

% --- Executes on button press in finish.
function finish_Callback(hObject, eventdata, handles) %#ok<INUSL,DEFNU>
global pf
global FileName
global PathName

if ~get(handles.runmfile,'Value');
  a = inputdlg({'enter name of workspace variable'},'MTEX Import Wizard',1,{'pf'});
  assignin('base',a{1},pf);
else
  str = exportPF(PathName, FileName, pf);
  str = generateCodeString(str);
  % Throw to command window if java is not available
  err = javachk('mwt','The MATLAB Editor');
  if ~isempty(err)
    local_display_mcode(str,'cmdwindow');
  end
  com.mathworks.mlservices.MLEditorServices.newDocument(str,true);
end

close(handles.wizard);


%% set visible objects depending on tab page
function set_tab(hObject,handles) %#ok<INUSL,DEFNU>
global page
handles.tabA = [ handles.plot,handles.preview, handles.runmfile ];
handles.tabB = [ handles.Bdatalist, handles.Badd, handles.Bremove];
                  
handles.tabC = [ handles.Cspecimepopup, handles.Ccrystalpopup, ...
                 handles.specime, handles.crystal, ...
                 handles.Ca, handles.Cb, handles.Cc, ... 
                 handles.a, handles.b, handles.c, ...
                 handles.alpha, handles.beta, handles.gamma, ...
                 handles.Calpha, handles.Cbeta, handles.Cgamma, ...
                 handles.axis, handles.angles ];
handles.tabD = [ handles.Dpolefigurelist, ...
                handles.h, handles.k, handles.i, handles.l, ...
                handles.Dh, handles.Dk, handles.Di, handles.Dl, ...
                handles.scoeff,handles.scale, handles.Dscale,...
                handles.Miller ];
            
handles.all =  [ handles.tabA,handles.tabB,handles.tabC,handles.tabD ];
set(handles.all, 'Visible', 'off');

set(handles.prev, 'Enable', 'on');
set(handles.next, 'Enable', 'on');
set(handles.finish, 'Enable','off');

switch page 
    case 1
        set(handles.tabB, 'Visible', 'on');
        set(handles.prev, 'Enable', 'off');
        set(handles.subtitle, 'String', '( 1 / 4 ) Select Diffraction Data');
    case 2
        set(handles.tabC, 'Visible', 'on');
        set(handles.subtitle, 'String', '( 2 / 4 ) Set Symmetries');
    case 3
        set(handles.tabD, 'Visible', 'on');
        set(handles.subtitle, 'String', '( 3 / 4 ) Set Miller Indices');
   
    case 4  
        set(handles.tabA, 'Visible', 'on');
        set(handles.subtitle, 'String', '( 4 / 4 ) Summary');
        set(handles.next, 'Enable', 'off');
        set(handles.finish, 'Enable','on');
end


%% Some Dummy functions
% --- Executes on selection change in Cspecimepopup.
function Cspecimepopup_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function Ca_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function Cb_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function Cc_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function Calpha_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function Cbeta_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function Cgamma_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function Bdatalist_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function runmfile_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
function preview_Callback(hObject, eventdata, handles)%#ok<INUSD,DEFNU>

%%
% --- Executes during object creation, after setting all properties.
function Cspecimepopup_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Ca_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Cb_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Cc_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Calpha_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Cbeta_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Cgamma_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Cd_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Dpolefigurelist_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Dh_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function Dk_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function Di_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function Dl_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Ccrystalpopup_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Dscale_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Bdatalist_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function preview_CreateFcn(hObject, eventdata, handles)%#ok<INUSD,DEFNU>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function varargout = import_wizard_OutputFcn(hObject, eventdata, handles)  %#ok<INUSL,INUSL>
varargout{1} = handles.output;

function s = errortext
e = lasterror;
e = e.message;
pos = strfind(e,'</a>');
s = e(pos+5:end);


% --- Creates and returns a handle to the GUI figure. 
function h1 = import_wizard_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'pushbutton', 8, ...
    'listbox', 5, ...
    'text', 27, ...
    'edit', 16, ...
    'uipanel', 7, ...
    'activex', 2, ...
    'togglebutton', 2, ...
    'slider', 2, ...
    'popupmenu', 4, ...
    'axes', 2, ...
    'checkbox', 2), ...
    'override', 1, ...
    'release', 13, ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', '/home/ralf/Arbeit/mtex/tools/import_wizard/import_wizard.m');
appdata.lastValidTag = 'wizard';
appdata.GUIDELayoutEditor = [];

h1 = figure(...
'Units','characters',...
'PaperUnits',get(0,'defaultfigurePaperUnits'),...
'BackingStore','off',...
'Color',[0.701960784313725 0.701960784313725 0.701960784313725],...
'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
'DockControls','off',...
'DoubleBuffer','off',...
'IntegerHandle','off',...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'MenuBar','none',...
'Name','Import Wizard',...
'NumberTitle','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'PaperSize',[20.98404194812 29.67743169791],...
'PaperType',get(0,'defaultfigurePaperType'),...
'Position',[100 102.384615384615 71.6 23.6923076923077],...
'Renderer','None',...
'RendererMode','manual',...
'Resize','off',...
'ToolBar','none',...
'WindowStyle','modal',...
'Clipping','off',...
'BusyAction','cancel',...
'HandleVisibility','callback',...
'HitTest','off',...
'Interruptible','off',...
'SelectionHighlight','off',...
'Tag','wizard',...
'UserData',[],...
'Visible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Bdatalist';

h2 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Bdatalist_Callback'',gcbo,[],guidata(gcbo))',...
'FontName','monospaced',...
'HorizontalAlignment','left',...
'Max',2,...
'Position',[1.6 4.3076923076923 40.2 15.4615384615385],...
'String',blanks(0),...
'Style','listbox',...
'Value',1,...
'ButtonDownFcn','import_wizard(''Bdatalist_ButtonDownFcn'',gcbo,[],guidata(gcbo))',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Bdatalist_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Bdatalist');

appdata = [];
appdata.lastValidTag = 'preview';

h3 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''preview_Callback'',gcbo,[],guidata(gcbo))',...
'Enable','inactive',...
'FontName','monospaced',...
'HorizontalAlignment','left',...
'Max',3,...
'Min',1,...
'Position',[2.66666666666667 5.38461538461538 68 14.3846153846154],...
'String',blanks(0),...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''preview_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','preview');

appdata = [];
appdata.lastValidTag = 'Dpolefigurelist';

h4 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Dpolefigurelist_Callback'',gcbo,[],guidata(gcbo))',...
'FontName','monospaced',...
'HorizontalAlignment','left',...
'Max',2,...
'Position',[2 4.3076923076923 39.8 15.4615384615385],...
'String',blanks(0),...
'Style','listbox',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Dpolefigurelist_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Dpolefigurelist');

appdata = [];
appdata.lastValidTag = 'Cgamma';

h5 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits','pixels',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Cgamma_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'FontSize',10.6666666666667,...
'HorizontalAlignment','right',...
'Position',[49.4666666666667 13.3846153846154 7 1.61538461538462],...
'String','90',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Cgamma_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Cgamma',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'c';

h6 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'CData',[],...
'HorizontalAlignment','right',...
'Position',[47.2666666666667 15.9230769230769 1.6 1.15384615384615],...
'String','c',...
'Style','text',...
'Tag','c',...
'UserData',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Cc';

h7 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits','pixels',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Cc_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'FontSize',10.6666666666667,...
'HorizontalAlignment','right',...
'Position',[49.4666666666667 15.8461538461538 7 1.69230769230769],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Cc_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Cc',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'Bremove';

h8 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','import_wizard(''Bremove_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[43.4000000000002 15.7692307692308 5.4 1.76923076923077],...
'String','-',...
'Tag','Bremove',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'gamma';

h9 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','right',...
'Position',[41.4666666666667 13.2307692307692 7.6 1.38461538461538],...
'String','gamma',...
'Style','text',...
'Tag','gamma',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'h';

h10 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[48.1666666666667 16.8333333333333 1.83333333333333 1.33333333333333],...
'String','h',...
'Style','text',...
'Tag','h',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Dh';

h11 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Dh_Callback'',gcbo,[],guidata(gcbo))',...
'HorizontalAlignment','right',...
'Position',[50.8 16.7692307692308 9.2 1.61538461538462],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Dh_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Dh');

appdata = [];
appdata.lastValidTag = 'Dk';

h12 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Dk_Callback'',gcbo,[],guidata(gcbo))',...
'HorizontalAlignment','right',...
'Position',[50.8 14.9230769230769 9.2 1.61538461538462],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Dk_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Dk');

appdata = [];
appdata.lastValidTag = 'k';

h13 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[48.1666666666667 15.1666666666667 1.83333333333333 1.08333333333333],...
'String','k',...
'Style','text',...
'Tag','k',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'i';

h14 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[48.1666666666667 13.1666666666667 1.83333333333333 1.08333333333333],...
'String','i',...
'Style','text',...
'Tag','i',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Di';

h15 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Di_Callback'',gcbo,[],guidata(gcbo))',...
'HorizontalAlignment','right',...
'Position',[50.8 12.9230769230769 9.2 1.61538461538462],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Di_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Di');

appdata = [];
appdata.lastValidTag = 'runmfile';

h16 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','import_wizard(''runmfile_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[1.6 3.92307692307692 22.2 1.23076923076923],...
'String','Generate m-Code',...
'Style','checkbox',...
'Value',1,...
'Tag','runmfile',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Ccrystalpopup';

h17 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Ccrystalpopup_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[20.6666666666666 18 28.2 1.76923076923077],...
'String',blanks(0),...
'Style','popupmenu',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Ccrystalpopup_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Ccrystalpopup',...
'UserData',[0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0]);

appdata = [];
appdata.lastValidTag = 'Badd';

h18 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','import_wizard(''Badd_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[43.4000000000003 17.9230769230769 5.4 1.76923076923077],...
'String','+',...
'Tag','Badd',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Cspecimepopup';

h19 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Cspecimepopup_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[20.6666666666667 9.15384615384616 28 1.69230769230769],...
'String',blanks(0),...
'Style','popupmenu',...
'Value',1,...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Cspecimepopup_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Cspecimepopup');

appdata = [];
appdata.lastValidTag = 'Miller';

h20 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[44.8333333333333 18.5833333333333 18.3333333333333 1.08333333333333],...
'String','Miller indices',...
'Style','text',...
'Tag','Miller',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Cb';

h21 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits','pixels',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Cb_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'FontSize',10.6666666666667,...
'HorizontalAlignment','right',...
'Position',[34.4666666666666 15.8461538461538 7 1.69230769230769],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Cb_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Cb',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'scale';

h22 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[48.1666666666667 7.08333333333333 1.83333333333333 1.08333333333333],...
'String','a',...
'Style','text',...
'Tag','scale',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'togglebutton1';

h23 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits','pixels',...
'Callback','import_wizard(''togglebutton1_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'Enable','off',...
'FontSize',10.6666666666667,...
'FontWeight','light',...
'Max',21,...
'Position',[0.833333333333333 3.5 68 0.0833333333333333],...
'Style','frame',...
'Value',1,...
'Clipping','off',...
'Tag','togglebutton1',...
'UserData',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'finish';

h24 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','import_wizard(''finish_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[54.8 0.999999999999991 13.8 1.76923076923077],...
'String','Finish',...
'Value',1,...
'Tag','finish',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'prev';

h25 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','import_wizard(''prev_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[25.4 0.999999999999991 13.8 1.76923076923077],...
'String','<< previous',...
'Tag','prev',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'title';

h26 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'FontSize',14,...
'FontWeight','bold',...
'ForegroundColor',[0.501960784313725 0.501960784313725 0.501960784313725],...
'HorizontalAlignment','right',...
'Position',[-0.2 20.3 72 3.84615384615385],...
'String',{  blanks(0); ' Import Wizard ' },...
'Style','text',...
'Clipping','off',...
'HitTest','off',...
'Interruptible','off',...
'Tag','title',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'next';

h27 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','import_wizard(''next_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[39.2 0.999999999999991 13.8 1.76923076923077],...
'String','next >>',...
'Tag','next',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Calpha';

h28 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits','pixels',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Calpha_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'FontSize',10.6666666666667,...
'HorizontalAlignment','right',...
'Position',[20.4666666666667 13.3076923076923 7 1.61538461538462],...
'String','90',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Calpha_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Calpha',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'Cbeta';

h29 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits','pixels',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Cbeta_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'FontSize',10.6666666666667,...
'HorizontalAlignment','right',...
'Position',[34.2666666666666 13.3076923076923 7 1.61538461538462],...
'String','90',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Cbeta_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Cbeta',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'axis';

h30 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[4 16 10.6 1.15384615384615],...
'String','axis:',...
'Style','text',...
'Tag','axis',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'a';

h31 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'CData',[],...
'HorizontalAlignment','right',...
'Position',[18.4666666666667 15.8461538461538 1.6 1.30769230769231],...
'String','a',...
'Style','text',...
'Tag','a',...
'UserData',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'b';

h32 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'CData',[],...
'HorizontalAlignment','right',...
'Position',[32.4666666666667 16 1.6 1.15384615384615],...
'String','b',...
'Style','text',...
'Tag','b',...
'UserData',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Ca';

h33 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits','pixels',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Ca_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'FontSize',10.6666666666667,...
'HorizontalAlignment','right',...
'Position',[20.4666666666667 15.8461538461538 7 1.69230769230769],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Ca_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Ca',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'angles';

h34 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[4 13.3846153846154 10.6 1.15384615384615],...
'String','angles:',...
'Style','text',...
'Tag','angles',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'alpha';

h35 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','right',...
'Position',[13.8666666666667 13.2307692307692 6.2 1.30769230769231],...
'String','alpha',...
'Style','text',...
'Tag','alpha',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'beta';

h36 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','right',...
'Position',[29.4666666666667 13.3846153846154 4.4 1.15384615384615],...
'String','beta',...
'Style','text',...
'Tag','beta',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'l';

h37 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'CData',[],...
'HorizontalAlignment','left',...
'Position',[48.1666666666667 11.25 1.83333333333333 1.08333333333333],...
'String','l',...
'Style','text',...
'Tag','l',...
'UserData',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Dl';

h38 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Dl_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'HorizontalAlignment','right',...
'Position',[50.8 11 9.2 1.61538461538462],...
'String','0',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Dl_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Dl',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'crystal';

h39 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontWeight','bold',...
'HorizontalAlignment','left',...
'Position',[1.66666666666667 18.3333333333333 16.6666666666667 1.08333333333333],...
'String','crystal symmetry',...
'Style','text',...
'Tag','crystal',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'specime';

h40 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontWeight','bold',...
'HorizontalAlignment','left',...
'Position',[1.83333333333333 9.33333333333333 18.5 1.25],...
'String','specimen symmetry',...
'Style','text',...
'Tag','specime',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Dscale';

h41 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','import_wizard(''Dscale_Callback'',gcbo,[],guidata(gcbo))',...
'HorizontalAlignment','right',...
'Position',[50.8 6.78205128205128 9.2 1.61538461538462],...
'String','1',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'import_wizard(''Dscale_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','Dscale');

appdata = [];
appdata.lastValidTag = 'plot';

h42 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','import_wizard(''plot_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[1.4 1.15384615384615 13.8 1.76923076923077],...
'String','plot',...
'Tag','plot',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'subtitle';

h43 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'FontSize',12,...
'FontWeight','bold',...
'HorizontalAlignment','left',...
'Position',[1.5 20.4166666666667 42.1666666666667 1.5],...
'String','Add data files',...
'Style','text',...
'HandleVisibility','off',...
'HitTest','off',...
'Interruptible','off',...
'Tag','subtitle',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'scoeff';

h44 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','left',...
'Position',[44.8333333333333 8.41666666666666 18.5 1.08333333333333],...
'String','structure coefficients',...
'Style','text',...
'Tag','scoeff',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   eval(createfcn);
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error('MATLAB:gui_mainfcn:FieldNotFound', 'Could not find field %s in the gui_State struct in GUI M-file %s', gui_StateFields{i}, gui_Mfile);
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % IMPORT_WIZARD
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % IMPORT_WIZARD(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallbak(gui_State, varargin{:})
    % IMPORT_WIZARD('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % IMPORT_WIZARD(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~isa(handle(fig),'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || isprop(fig,'__GUIDEFigure');
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);
        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishandle(gui_hFigure)
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        rmappdata(gui_hFigure,'InGUIInitialization');
    end

    % If handle visibility is set to 'callback', turn it on until finished with
%% OutputFcn
    if isscalar(gui_hFigure) && ishandle(gui_hFigure)
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = openfig(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    gui_hFigure = openfig(name, singleton, visible);
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallbak(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishandle(varargin{2}), 1) ...
             && ~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])));
catch
    result = false;
end

