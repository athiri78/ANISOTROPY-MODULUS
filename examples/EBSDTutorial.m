%% Short EBSD Analysis Tutorial 
% How to detect grains in EBSD data and estimate an ODF.
%
%% Open in Editor
%  
%
%% Import EBSD data
% The following script is automatically generated by the import wizard.

% crystal symmetry
CS = {...
  symmetry('m-3m'),...
  symmetry('m-3m')};

% specimen symmetry
SS = symmetry('-1');

% specify file name
fname = fullfile(mtexDataPath,'EBSD','85_829grad_07_09_06.txt');


% create an EBSD variable containing the data
ebsd = loadEBSD(fname,CS,SS,'interface','generic' ...
  , 'ColumnNames', { 'Index' 'Phase' 'x' 'y' 'Euler1' 'Euler2' 'Euler3' 'MAD' 'BC' 'BS' 'Bands' 'Error' 'ReliabilityIndex'}, 'Bunge', 'ignorePhase', 0);

% plotting convention
plotx2east

%% Visualize the data
% First we make a spatial plot of the orientations of the crystals of phase
% 1 using hkl colorcoding.

figure(1)
plot(ebsd,'colorcoding','hkl','phase',1)

%%
% The colorcoding can be interpreted by the collored (0,0,1) inverse pole
% figure

colorbar('position',[100 100 250 250])


%% Grain reconstruction
% Next we reconstruct the grains within our measurements.
%

[grains ebsd] = segment2d(ebsd)

%%
% and plot them into our orientation plot

figure(1); hold on
plotboundary(grains)

%%
% One can also plot all the grains together with their mean orientation

plot(grains,'colorcoding','hkl','phase',1)

%% ODF estimation
% Next we reconstruct an ODF from the EBSD data. Therefore, we first have
% to fix a kenel function. This can be done by

psi = calcKernel(grains,'phase',1)

%%
% Now the ODF is reconstructed by
odf = calcODF(ebsd,'phase',1,'kernel',psi)

%%
% Once an ODF is estimated all the functionallity MTEX offers for 
% <ODFCalculations.html ODF analysis> and <ODFPlot.html ODF visualisation>
% is available.

plotpdf(odf,[Miller(1,0,0),Miller(1,1,0),Miller(1,1,1)],'antipodal','silent','position',[10 10 600 200])


